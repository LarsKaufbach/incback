#!/bin/bash

### incback ###
# Create incremental backups with tar
#
#
#    Copyright (C) 2018 Falk Scharbau <falk@scharbau.de>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###
read -r -d '' usageText <<'EOF'
Usage:

  incback-core -v [-c <compression>] [-f <config_file>] [-d <destination>] [-p <parent_backup>] [-s <source>..] [ACTION [ACTION_ARG]]

  Actions:
    backup full|incremental
	  - full        : Create full backup
 	  - incremental	: Create incremental backup, must have -p option to set parent backup.

    restore
      Restore the backup given by the -p option.

    list [full|incremental]
      List all or only full/incremental backups at the current backup destination.

    show
      Show details about the backup given by the -p option.

  Options:
	-b					: Batch mode. Auto-approve all confirmation prompts.
    -c <compression>    : Set compression alogrithm, "gzip"(default) and "bzip2" supported
    -d <destination>    : Set destination directory for backup
    -f <config_file>    : Set a configuration file to use. Command line parameters have precedence.
    -p <parent_backup>  : Used for incremental backups and restoration. Relative path under destination directory pointing to a parent backup
                          to restore or to base the incremental backup on. For incremental backups the location must contain a snapshot file
    -s <source>         : Add source file or directory for backup, allowed multiple times
    -v                  : Enable verbose output
EOF

BACKUP_FILENAME="archive"
SNAPSHOT_FILENAME="level%d.snapshot"

# Temporary directory
#TMP_DIR=`mktemp -d`
#trap "rm -rf $TMP_DIR" EXIT

function usage {
	echo "$usageText" 	
}

### Helper functions for colored output and graceful exit

function fail {
	msg="$1"
	code="$2"
	printUsage="$3"
	
	[ -z "$printUsage" ] && printUsage=false
	
	echo -e "\e[31m\e[1m$msg\e[0m"
	
	[ "$printUsage" = true ] && usage

	
	exit $code
}

function print_msg {
	echo -en "$1"
	[ "$2" = true ] && echo
}

function print_err {
	print_msg "\e[31m\e[1m$1\e[0m" "$2"
}

function print_ok {
	print_msg "\e[32m\e[1m$1\e[0m" "$2"
}

function print_warn {
	print_msg "\e[33m\e[1m$1\e[0m" "$2"
}

function print_info {
	print_msg "\e[36m\e[1m$1\e[0m" "$2"
}

## Load configuration
function loadConfiguration {
	
	config="$CONFIG_FILE"

	if [ "$VERBOSE" = true ]; then
		echo -n "Configuration file	: "
		if [ -z "$config" ]; then
			echo "[none]"
		else
			echo "$config"
		fi
	fi
	
	if [ -z "$config" ]; then
		return
	fi

	if [ ! -f "$config" ]
	then
		fail "Configuration file not found!" 1
	fi

	source "$config"

	
}


# Check backup preconditions

function checkBackupSource {

	# Backup source

	if [ -z "$BACKUP_SOURCE" ]; then
		fail "No backup source defined!" 100	
	fi
	
	[ "$VERBOSE" = true ] && echo "Backup source	 	: $BACKUP_SOURCE "

	
	if [ ! -d "$BACKUP_SOURCE" ]; then
		fail "Backup source not found!" 100	
	fi
}

function checkBackupDestination {
	
	if [ -z "$BACKUP_DESTINATION" ]; then
		fail "No backup destination defined!" 100	
	fi
	
	[ "$VERBOSE" = true ] && echo "Backup destination	: $BACKUP_DESTINATION "

	if [ ! -d "$BACKUP_DESTINATION" ]; then
		[ "$VERBOSE" = true ] && print_info "Backup destination not found. Creating ..."
		mkdir -p "$BACKUP_DESTINATION"
		if [ ! -d "$BACKUP_DESTINATION" ]; then
			fail "Could not create backup destination!" 102
		fi
	fi
}

function checkBackupParent {

	if [ -z "$BACKUP_PARENT" ]; then
		fail "No backup parent defined!" 100	
	fi

	[ "$VERBOSE" = true ] && echo "Backup parent		: $BACKUP_PARENT "

	if [ ! -d "$BACKUP_PARENT" ]; then

		parentDirs=($(find "$BACKUP_DESTINATION" -type d -name "$BACKUP_PARENT"))
		if [ "${#parentDirs[@]}" -gt 1 ]; then
			print_err "Backup parent is ambivalent!" true
			for dir in "${parentDirs[@]}"; do
				print_warn "$dir" true
			done
			fail "Cannot continue." 180
		elif [ "${#parentDirs[@]}" -eq 0 ]; then
			fail "Backup parent not found!" 112
		fi
		
		BACKUP_PARENT="${parentDirs[0]}"
		
	fi
}

# Perform daily incremental backup
# $1: source directory
# $2: destination directory
# $3: archive file
# $4: parent directory
function incrementalBackup {

	source="$1"
	parent="$4"
	archive="$3"
	directory="$parent/$2"
		
	local files=(`ls $parent/*.snapshot 2>/dev/null`);
	local parentSnapshot="${files[0]}"
	
	if [ -z "$parentSnapshot" ]; then
		fail "No snapshot file found in parent backup!" 160
	fi
	
	[ "$VERBOSE" = true ] && echo "Based on		: $parentSnapshot"
	
	local parentLevel=${parentSnapshot##*level}
	parentLevel=${parentLevel%.*}
	
	case $parentLevel in
    	''|*[!0-9]*) fail "Could not determine base level! ($parentSnapshot)" 161 ;;
    	*)  ;;
	esac
			
	local level=$((parentLevel+1))
	
	[ "$VERBOSE" = true ] && echo "Level increment		: $parentLevel > $level"
	
	local snapshotFile
	printf -v snapshotFile "$SNAPSHOT_FILENAME" "$level"
							
	[ "$VERBOSE" = true ] && echo "Snapshot file		: $snapshotFile"

	[ "$VERBOSE" = true ] && echo
		
	print_info "Creating incremental backup ..."
	echo
	
	mkdir -p "$directory"
	cp -a "$parentSnapshot" "$directory/$snapshotFile"
	
	performBackup "$source" "$directory" "$archive" "$snapshotFile"
	
	return $?
}


# Perform full backup
# $1: source directory
# $2: destination directory
# $3: archive file
function fullBackup {
	
	source="$1"
	directory="$BACKUP_DESTINATION/$2"
	archive="$3"

	local snapshotFile
	printf -v snapshotFile "$SNAPSHOT_FILENAME" 0
	
	[ "$VERBOSE" = true ] && echo "Snapshot file		: $snapshotFile"

	[ "$VERBOSE" = true ] && echo
						
	print_info "Creating full backup  ... "
	
	[ "$VERBOSE" = true ] && echo
												
	performBackup "$source" "$directory" "$archive" "$snapshotFile"
			
	return $?
}

### performBackup
# Actually call tar with a lot of fancy args.
# $1: source directory
# $2: destination directory
# $3: archive file name
# $4: snapshot file name
function performBackup {

	source="$1"
	destination="$2"
	backupFile="$3"
	snapshotFile="$4"
		
	
	mkdir -p "$destination"
	
	backupStart=$SECONDS	
	
	local tarOps="-cp"
	[ "$VERBOSE" = true ] && tarOps="${tarOps}v"
	
	if [ "$BACKUP_COMPRESSION" == "gzip" ]; then
		tarOps="${tarOps}z"
	elif [ "$BACKUP_COMPRESSION" == "bzip2" ]; then
		tarOps="${tarOps}j"
	else
		fail "Unknown compression! ($BACKUP_COMPRESSION)" 150
	fi	
	
	tarOps="${tarOps}f"
	tar --listed-incremental="$destination/$snapshotFile" $tarOps "$destination/$backupFile" -C "$source" .

	res=$?

	if [ ! $res -eq 0 ];
	then
		print_err "Tar failed! ($res)"
		echo
	else

		backupDuration=$(($SECONDS - $backupStart))
		backupMin=$(($backupDuration / 60))
		backupSec=$(($backupDuration % 60))

		print_ok "OK." true
		[ "$VERBOSE" = true ] && echo "Took ${backupMin}min ${backupSec}sec."
		
	fi

	return $res
}

### backup
# Creates full and incremental backups
# Loads configuration, checks preconditions, determines backup level and performs that backup if needed
# $1: "full" or "incremental"

function backup {

	[ "$VERBOSE" = true ] && echo && echo "Backup requested." && echo

	# Type: full or incremental
	local backupType="$1"
	
	[ -z "$backupType" ] && fail "No backup type!" 110
	
	case "$backupType" in
		full)
			backupType="full";;
		incremental)
			backupType="incremental";;
		*)
			fail "Unknown backup type! ($1)" 111;;
	esac

	# Check directories
	checkBackupSource
	checkBackupDestination
	
	if [ "$backupType" == "incremental" ]; then
		checkBackupParent
	fi
	
	# Timestamp and subdirectory for backup
	local timestamp=`date -R`
	local directory=`date -d"$timestamp" +%Y%m%d-%H%M%S`
	
	if [ "$backupType" == "full" ]; then
		directory="$directory-full"
	else
		directory="$directory-incremental"
	fi
	
	[ "$VERBOSE" = true ] && echo "Timestamp		: $timestamp"
	[ "$VERBOSE" = true ] && echo "Compression		: $BACKUP_COMPRESSION"
	
	# Archive file name
	local ext
	if [ "$BACKUP_COMPRESSION" == "gzip" ]; then
		ext="tar.gz"
	elif [ "$BACKUP_COMPRESSION" == "bzip2" ]; then
		ext="tar.bz2"
	else
		fail "Unknown compression! ($BACKUP_COMPRESSION)" 150
	fi	
	
	local archiveFile="$BACKUP_FILENAME.$ext"
		
	if [ "$VERBOSE" = true ]; then
		echo "Backup type 		: $backupType"
		echo "Directory   		: `basename "$directory"`"
		echo "Archive file 		: $archiveFile"
	fi
	

	if [ "$backupType" == "full" ]; then
		fullBackup "$BACKUP_SOURCE" "$directory" "$archiveFile"
	else
		incrementalBackup "$BACKUP_SOURCE" "$directory" "$archiveFile" "$BACKUP_PARENT"
	fi
	
}

### readDirectory
# $1: directory to read
# $2: depth
function readDirectory {
	
	local directory="$1"
	local depth="$2"
	
	# Read files at destination and filter full backup directories
	local files=($directory/*)
	local fullDirs=()
	for file in "${files[@]}"; do
		[[ -d "$file" ]] && fullDirs+=("$file")
	done

	# Handle full backup directories
	for currentDir in "${fullDirs[@]}"; do
		
		local backupName=`basename "$currentDir"`		
			
		readBackup "$currentDir"

		if [ "${backupInfo[0]}" = false ]; then
			echo -n "[$backupName] "
			print_err "${backupInfo[1]}" true

		else
		
			local archive="${backupInfo[1]}"
			local snapshot="${backupInfo[2]}"
	
			local archiveDate=`date -r "$currentDir" "+%d.%m.%Y-%H:%M:%S"`
						
			local archiveSize=`stat -c '%s' "$archive"`
			archiveSize=`numfmt --to=iec-i --suffix=B --format="%3f" $archiveSize`
			
			local type="Full"
			[ "$depth" -gt 0 ] && type="Level $depth"
			
			local i=0;
			while [ "$i" -lt "$depth" ]; do echo -n "  "; ((i++)); done
			
			echo "$archiveDate $type backup ($archiveSize) [$backupName]"
		fi
		
		readDirectory "$currentDir" "$((depth+1))"
			
	done
	
}

### readBackup
# $1: directory to read
#
# Sets global 'backupInfo'
# If success, contains "true",archive file,snapshot file and incremental level
# If failure, contains "false" and error message
function readBackup {

	local backupName=`basename $1`
	local files=($(find "$1" -maxdepth 1 -type f -name "$BACKUP_FILENAME.tar.gz" -o -type f -name "$BACKUP_FILENAME.tar.gz2"))
	local archive="${files[0]}"
	
	files=($1/*.snapshot);
	
	local snapshot="${files[0]}"
	
	local level=${snapshot##*level}
	level=${level%.*}
	
	local success=true
	local error=""
	
	# Archive file
	if [ ! -f "$archive" ]; then
		success=false
		error="No archive file found!"
	elif [ ! -f "$snapshot" ]; then
		success=false
		error="No snapshot file found!"
	elif [ -z "$level" ]; then
	 	success=false
	 	error="Could not determine backup level!"
 	fi
	
	if [ "$success" = true ]; then
		backupInfo=(true "$archive" "$snapshot" "$level")
	else
		backupInfo=(false "$error")
	fi
}

### list
# Lists all available backups
function list {

	local output="$1"
	[ -z "$output" ] && output=true

	checkBackupDestination
	
	[ "$output" = true ] && [ "$VERBOSE" = true ] && echo
	
	local depth=0	
	
	readDirectory "$BACKUP_DESTINATION" "$depth"
}

function chooseBackup {

	local message="$1"

	local backupIndex

	if [ ! -z "$SCRIPT_ACTION_ARG" ]; then
		list false
		backupIndex="$SCRIPT_ACTION_ARG"
	else
		list true

		echo	
		echo -n "$message (1-${#backups[@]}, other cancel): "
	
		read backupIndex
	fi
	((backupIndex--))
	
	[ "$VERBOSE" = true ] && echo
	
	[[ "$backupIndex" -lt 0 ]] || [[ "$backupIndex" -gt "(${#backups[@]}-1)" ]] && exit 200 

	selectedArchive="${backups[$backupIndex]}"
	
	local archive="$selectedArchive"
	local archiveBase=`basename "$archive"`
	local archiveDir=`dirname "$archive"`
	
	
	local full=true
	[[ "$archiveBase" == "$INC_BACKUP_NAME" ]] && full=false
	
	
	local day
	local week
	local year
	
	local path="$archiveDir"
	
	local backupType="full"

	if [ "$full" = false ]; then
		backupType="incremental"
		day=`basename "$path"`
		path=`dirname "$path"`
	fi

	week=`basename "$path"`
	path=`dirname "$path"`

	year=`basename "$path"`

	local archiveSize=`stat -c '%s' "$archive"`
	archiveSize=`numfmt --to=iec-i --suffix=B --format="%3f" $archiveSize`

	
	echo "Type	: $backupType"
	echo "Year	: $year"
	echo "Week	: $week"
	
	if [ "$full" = false ]; then
		echo "Day	: $day"
	fi

	echo 
	echo "Archive : $archive"
	echo "Size    : $archiveSize"
	echo "Target  : $src"
	
	echo

}


### restore
# Restore a specific backup
function restore {

	[ "$VERBOSE" = true ] && echo && echo "Restoration requested." && echo

	# Check directories
	checkBackupSource
	checkBackupDestination
	checkBackupParent

	readBackup "$BACKUP_PARENT"
	
	if [ "${backupInfo[0]}" = false ]; then
		fail "${backupInfo[1]}" 190
	fi
	
	local archive="${backupInfo[1]}"
	local snapshot="${backupInfo[2]}"
	local level="${backupInfo[3]}"
			
	if [ "$VERBOSE" = true ]; then
		echo "Archive file            : `basename "$archive"`"
		echo "Snapshot file           : `basename "$snapshot"`"
		echo "Level                   : $level"
		echo
	fi	
	
	[ "$VERBOSE" = true ] && echo "Building incremental backup chain ..."
	
	local backupChain=($archive)
	local currentDirectory=`dirname "$archive"`
	 
	local currentLevel="$level"
	while [ "$currentLevel" -gt 0 ]; do
		currentDirectory=`dirname "$currentDirectory"`
		readBackup "$currentDirectory"
		if [ "${backupInfo[0]}" = false ]; then
			fail "${backupInfo[1]}" 190
		fi
		
		backupChain+=(${backupInfo[1]})
		((currentLevel--))
	done
	
	[ "$VERBOSE" = true ] && printf '%s\n' "${backupChain[@]}"
	
	if [ ! "$BATCH_MODE" = true ]; then
		print_warn "Really restore? (y/N): "
		
		read confirm
		
		if [[ ! "$confirm" == "y" ]]; then
			exit 200
		fi
		echo
	fi
	
	
	echo "Restoring backup ... "
	echo
	
	local chainLastIndex=$((${#backupChain[@]}-1))
	
	for ((chainIndex=$chainLastIndex; chainIndex >= 0; chainIndex--)); do
		local backupArchive="${backupChain[$chainIndex]}"
		local backupDir=`dirname "$backupArchive"`
		local backupName=`basename "$backupDir"`
		
		local tarOps="-x"
		[ "$VERBOSE" = true ] && tarOps="${tarOps}v"
		
		if [ "$BACKUP_COMPRESSION" == "gzip" ]; then
			tarOps="${tarOps}z"
		elif [ "$BACKUP_COMPRESSION" == "bzip2" ]; then
			tarOps="${tarOps}j"
		else
			fail "Unknown compression! ($BACKUP_COMPRESSION)" 150
		fi	
		
		tarOps="${tarOps}f"
		
		[ "$VERBOSE" = true ] && echo "[$backupName] ... "
		
		tar $tarOps "$backupArchive" -C "$BACKUP_SOURCE"		
		
		res=$?
		
		if [[ "$res" -eq 0 ]]; then
			[ "$VERBOSE" = true ] && print_ok "Success" true
		else	
			print_err "error $res" true
			fail "Could not restore backup!" 220
		fi
								
	done
		

	#cat "$selectedArchive" | tar xvzf - -g /dev/null --ignore-zeros -C "$src"
	
}

### remove
# Removes a specific backup
function remove {
	
	checkBackupParent

	if [ ! "$BATCH_MODE" = true ]; then
		print_warn "Really remove? (y/N): "
		
		read confirm
		
		if [[ ! "$confirm" == "y" ]]; then
			exit 200
		fi
		echo
	fi

	echo -n "Removing backup ... "
	
	local archiveDir="$BACKUP_PARENT"
	
	rm -r "$archiveDir"
	
	res="$?"
	
	if [[ "$res" -eq 0 ]]; then
		print_ok "success" true
	else
		print_err "error $res" true
		fail "Could not delete backup!" 210
	fi
}

### show
# Shows metadata and contained files of a specific backup
function show {
	chooseBackup "Which backup to show?"

	echo "Folders and files:"
	tar tzf "$selectedArchive"	
}



VERBOSE=false
BATCH_MODE=false
CONFIG_FILE="incback.conf"

BACKUP_SOURCE="/home/falk/bin/incback/source.test"
BACKUP_DESTINATION="/home/falk/bin/incback/destination.test"
BACKUP_COMPRESSION="gzip"
BACKUP_PARENT=""

# We want empty results if no dirs/files can be found while globbing
shopt -s nullglob
trap "{ shopt -u nullglob; }" EXIT

# Look for configuration option to load that first
while getopts ":f:vb" opt; do
  case $opt in
	b)
	  BATCH_MODE=true;;
    v)
      VERBOSE=true;;
    f)
      CONFIG_FILE="$OPTARG";;
    *)
      ;;
  esac
done

# Load configuration if available
loadConfiguration

# Parse rest of options, overwriting configuration file settings
OPTIND=1
while getopts ":vbc:s:d:p:f:" opt; do
  case $opt in
    c)
      BACKUP_COMPRESSION="$OPTARG";;
    s)
      BACKUP_SOURCE+=("$OPTARG");;
    d)
      BACKUP_DESTINATION="$OPTARG";;
    p)
      BACKUP_PARENT="$OPTARG";;
    \?)
      fail "Invalid option: -$OPTARG" 1 true;;
    :)
      fail "Option -$OPTARG requires an argument." 1 true;;
  esac
done

# Skip over options
shift $(($OPTIND-1))

# Action and action-argument after options
SCRIPT_ACTION="$1"
SCRIPT_ACTION_ARG="$2"

case "$SCRIPT_ACTION" in
	backup)
		backup "$SCRIPT_ACTION_ARG";;
	list)
		list;;
	restore)
		restore;;
	remove)
		remove;;
	show)
		show;;
	*)
		[ -z "$SCRIPT_ACTION" ] && fail "No action supplied!" 1 true
		fail "Unknown action! ($SCRIPT_ACTION)" 1 true
esac
		
exit 0



